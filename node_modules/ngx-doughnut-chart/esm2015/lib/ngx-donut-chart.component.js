/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
export class NgxDonutChartComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setDefaults();
        /** @type {?} */
        let angles = this._calculateAngles(this.data);
        /** @type {?} */
        let ArchPoints = this._calculateArcPoints(this.data);
    }
    /**
     * @return {?}
     */
    setDefaults() {
        this.arcs = [];
        this.radius = this.radius || 200;
        this.margin = this.margin || 10;
        this.thickness = this.thickness || 8;
        this.totalClass = this.totalClass || 'c-donutchart__title';
        this.origin = {
            x: this.radius,
            y: this.radius,
        };
        this.width = ((2 * this.radius) + (2 * this.margin)) + 'px';
        this.height = ((2 * this.radius) + (2 * this.margin)) + 'px';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _calculateArcPoints(data) {
        /** @type {?} */
        let archPoints = [];
        archPoints.push({
            x: this.radius,
            y: 0,
        });
        /** @type {?} */
        let startAngle = 0;
        /** @type {?} */
        let endAngle;
        /** @type {?} */
        let startX = this.origin.x;
        /** @type {?} */
        let startY = this.origin.y;
        for (let item of data) {
            endAngle = (startAngle + item.angle) % 360;
            startAngle += 8;
            /** @type {?} */
            let arc = this._describeArc(startX, startY, this.radius, startAngle, endAngle, item.color);
            this.arcs.push(arc);
            startAngle = endAngle;
        }
    }
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} radius
     * @param {?} startAngle
     * @param {?} endAngle
     * @param {?} color
     * @return {?}
     */
    _describeArc(x, y, radius, startAngle, endAngle, color) {
        /** @type {?} */
        let start = this._polarToCartesian(x, y, radius, startAngle);
        /** @type {?} */
        let end = this._polarToCartesian(x, y, radius, endAngle);
        /** @type {?} */
        let arcSweep = endAngle - startAngle <= 180 ? "0" : "1";
        /** @type {?} */
        let d = [
            "M", start.x, start.y,
            "A", radius, radius, 0, arcSweep, 1, end.x, end.y,
        ].join(" ");
        return {
            d: d,
            end: end,
            color: color,
        };
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _calculateAngles(data) {
        /** @type {?} */
        let angles = [];
        /** @type {?} */
        let total = this._getTotal(data);
        this.total = total;
        for (let i = 0; i < data.length; i++) {
            /** @type {?} */
            let dataItem = data[i];
            /** @type {?} */
            let angle = (dataItem.value / total) * 360.0;
            dataItem.angle = angle;
            dataItem.percentage = ((dataItem.value / total) * 100.0).toFixed(2) + '%';
            angles.push(angle);
        }
        return angles;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _getTotal(data) {
        return data.reduce((a, b) => ({ value: a.value + b.value })).value;
    }
    /**
     * @param {?} centerX
     * @param {?} centerY
     * @param {?} radius
     * @param {?} angleInDegrees
     * @return {?}
     */
    _polarToCartesian(centerX, centerY, radius, angleInDegrees) {
        /** @type {?} */
        let angleInRadians = (angleInDegrees) * Math.PI / 180.0;
        return {
            x: centerX + (radius * Math.cos(angleInRadians)) + this.margin,
            y: centerY + (radius * Math.sin(angleInRadians)) + this.margin,
        };
    }
}
NgxDonutChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-donut-chart',
                template: `<div
  class="c-donutchart"
  [ngStyle]="{'width': width}">
  <svg
    [ngStyle]="{'width': width, 'height': height}"
    xmlns="http://www.w3.org/2000/svg">
    <!-- <path [attr.d]="pathD" stroke="black" fill="transparent" stroke-width="8" fill-opacity="0.5"/> -->
    <path
      *ngFor="let arc of arcs"
      [attr.d]="arc.d"
      [attr.stroke]="arc.color"
      fill="transparent"
      [attr.stroke-width]="thickness"
      fill-opacity="0.5"/>
  </svg>

  <div
    class="c-donutchart__text"
    *ngIf="title"
    [ngStyle]="{'width': width, 'height': height}">
    <div
      [ngClass]="totalClass"
      [innerText]="total"></div>
    <div [innerText]="title"></div>
  </div>

  <div class="c-donutchart__legends">
    <div
      class="c-donutchart__legend"
      *ngFor="let item of data">
      <div
        class="c-donutchart__legend-bar"
        [ngStyle]="{'background-color': item.color}">
      </div>

      <div
        class="c-donutchart__legend-title"
        [innerText]="item.label">
      </div>

      <div
        class="c-donutchart__legend-percentage"
        [innerText]="item.percentage">
      </div>
    </div>
  </div>
</div>
`,
                styles: [`.c-donutchart{position:relative}.c-donutchart .c-donutchart__text{position:absolute;top:0;left:0;display:flex;flex-flow:column;align-items:center;justify-content:center}.c-donutchart .c-donutchart__title{font-size:40px}.c-donutchart .c-donutchart__legends{display:flex;justify-content:center}.c-donutchart .c-donutchart__legend{display:flex;flex-flow:column;align-items:center;margin:16px 8px}.c-donutchart .c-donutchart__legend-bar{display:flex;align-items:center;justify-content:center;margin-bottom:8px;width:40px;height:8px;border-radius:4px;background-color:#dc143c}.c-donutchart .c-donutchart__legend-percentage,.c-donutchart .c-donutchart__legend-title{text-align:center}`]
            },] },
];
/** @nocollapse */
NgxDonutChartComponent.ctorParameters = () => [];
NgxDonutChartComponent.propDecorators = {
    data: [{ type: Input }],
    radius: [{ type: Input }],
    margin: [{ type: Input }],
    title: [{ type: Input }],
    thickness: [{ type: Input }],
    totalClass: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxDonutChartComponent.prototype.data;
    /** @type {?} */
    NgxDonutChartComponent.prototype.radius;
    /** @type {?} */
    NgxDonutChartComponent.prototype.margin;
    /** @type {?} */
    NgxDonutChartComponent.prototype.title;
    /** @type {?} */
    NgxDonutChartComponent.prototype.thickness;
    /** @type {?} */
    NgxDonutChartComponent.prototype.totalClass;
    /** @type {?} */
    NgxDonutChartComponent.prototype.width;
    /** @type {?} */
    NgxDonutChartComponent.prototype.height;
    /** @type {?} */
    NgxDonutChartComponent.prototype.origin;
    /** @type {?} */
    NgxDonutChartComponent.prototype.arcs;
    /** @type {?} */
    NgxDonutChartComponent.prototype.total;
}

//# sourceMappingURL=data:application/json;base64,
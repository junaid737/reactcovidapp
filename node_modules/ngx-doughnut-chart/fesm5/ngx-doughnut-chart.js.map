{"version":3,"file":"ngx-doughnut-chart.js.map","sources":["ng://ngx-doughnut-chart/lib/ngx-donut-chart.service.ts","ng://ngx-doughnut-chart/lib/ngx-donut-chart.component.ts","ng://ngx-doughnut-chart/lib/ngx-donut-chart.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxDonutChartService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ngx-donut-chart',\n  template: `<div\n  class=\"c-donutchart\"\n  [ngStyle]=\"{'width': width}\">\n  <svg\n    [ngStyle]=\"{'width': width, 'height': height}\"\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <!-- <path [attr.d]=\"pathD\" stroke=\"black\" fill=\"transparent\" stroke-width=\"8\" fill-opacity=\"0.5\"/> -->\n    <path\n      *ngFor=\"let arc of arcs\"\n      [attr.d]=\"arc.d\"\n      [attr.stroke]=\"arc.color\"\n      fill=\"transparent\"\n      [attr.stroke-width]=\"thickness\"\n      fill-opacity=\"0.5\"/>\n  </svg>\n\n  <div\n    class=\"c-donutchart__text\"\n    *ngIf=\"title\"\n    [ngStyle]=\"{'width': width, 'height': height}\">\n    <div\n      [ngClass]=\"totalClass\"\n      [innerText]=\"total\"></div>\n    <div [innerText]=\"title\"></div>\n  </div>\n\n  <div class=\"c-donutchart__legends\">\n    <div\n      class=\"c-donutchart__legend\"\n      *ngFor=\"let item of data\">\n      <div\n        class=\"c-donutchart__legend-bar\"\n        [ngStyle]=\"{'background-color': item.color}\">\n      </div>\n\n      <div\n        class=\"c-donutchart__legend-title\"\n        [innerText]=\"item.label\">\n      </div>\n\n      <div\n        class=\"c-donutchart__legend-percentage\"\n        [innerText]=\"item.percentage\">\n      </div>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`.c-donutchart{position:relative}.c-donutchart .c-donutchart__text{position:absolute;top:0;left:0;display:flex;flex-flow:column;align-items:center;justify-content:center}.c-donutchart .c-donutchart__title{font-size:40px}.c-donutchart .c-donutchart__legends{display:flex;justify-content:center}.c-donutchart .c-donutchart__legend{display:flex;flex-flow:column;align-items:center;margin:16px 8px}.c-donutchart .c-donutchart__legend-bar{display:flex;align-items:center;justify-content:center;margin-bottom:8px;width:40px;height:8px;border-radius:4px;background-color:#dc143c}.c-donutchart .c-donutchart__legend-percentage,.c-donutchart .c-donutchart__legend-title{text-align:center}`]\n})\nexport class NgxDonutChartComponent implements OnInit {\n  @Input() data: [{any}];\n  @Input() radius: number;\n  @Input() margin: number;\n  @Input() title: string;\n  @Input() thickness: number;\n  @Input() totalClass: string;\n  width: string;\n  height: string;\n  origin: {x: number, y: number};\n  arcs: any[];\n  total: number;\n  constructor() { }\n\n  ngOnInit() {\n    this.setDefaults();\n    let angles = this._calculateAngles(this.data);\n    let ArchPoints = this._calculateArcPoints(this.data);\n  }\n\n  setDefaults() {\n    this.arcs = [];\n    this.radius = this.radius || 200;\n    this.margin = this.margin || 10;\n    this.thickness = this.thickness || 8;\n    this.totalClass = this.totalClass || 'c-donutchart__title';\n    this.origin = {\n      x: this.radius,\n      y: this.radius,\n    };\n    this.width = ((2 * this.radius) + (2 * this.margin)) + 'px';\n    this.height = ((2 * this.radius) + (2 * this.margin)) + 'px';\n  }\n\n  _calculateArcPoints(data) {\n    let archPoints = [];\n    archPoints.push({\n      x: this.radius,\n      y: 0,\n    });\n\n    let startAngle = 0;\n    let endAngle;\n    let startX = this.origin.x;\n    let startY = this.origin.y;\n\n    for (let item of data) {\n      endAngle = (startAngle + item.angle) % 360;\n      startAngle += 8;\n      // endAngle -=5;\n\n      let arc = this._describeArc(startX, startY, this.radius, startAngle, endAngle, item.color);\n      this.arcs.push(arc);\n\n      startAngle = endAngle;\n    }\n  }\n\n  _describeArc(x, y, radius, startAngle, endAngle, color){\n    let start = this._polarToCartesian(x, y, radius, startAngle);\n    let end = this._polarToCartesian(x, y, radius, endAngle);\n    let arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n    let d = [\n        \"M\", start.x, start.y,\n        \"A\", radius, radius, 0, arcSweep, 1, end.x, end.y,\n        // \"L\", x,y,\n        // \"L\", start.x, start.y\n    ].join(\" \");\n\n    return {\n      d: d,\n      end: end,\n      color: color,\n    };\n  }\n\n  _calculateAngles(data) {\n    let angles = [];\n    let total = this._getTotal(data);\n    this.total = total;\n    for(let i = 0; i < data.length; i++) {\n      let dataItem = data[i];\n      let angle = (dataItem.value / total) * 360.0;\n      dataItem.angle = angle;\n      dataItem.percentage = ((dataItem.value / total) * 100.0).toFixed(2) + '%';\n      angles.push(angle);\n    }\n\n    return angles;\n  }\n\n  _getTotal(data) {\n    return data.reduce((a, b) => ({ value : a.value + b.value })).value;\n  }\n\n  _polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    let angleInRadians = (angleInDegrees) * Math.PI / 180.0;\n\n    return {\n      x: centerX + (radius * Math.cos(angleInRadians)) + this.margin,\n      y: centerY + (radius * Math.sin(angleInRadians)) + this.margin,\n    };\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxDonutChartComponent } from './ngx-donut-chart.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxDonutChartComponent],\n  exports: [NgxDonutChartComponent]\n})\nexport class NgxDonutChartModule { }\n"],"names":["tslib_1.__values"],"mappings":"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"}

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-doughnut-chart', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ngx-doughnut-chart'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,i0,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxDonutChartService = (function () {
        function NgxDonutChartService() {
        }
        NgxDonutChartService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        NgxDonutChartService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgxDonutChartService.ngInjectableDef = i0.defineInjectable({ factory: function NgxDonutChartService_Factory() { return new NgxDonutChartService(); }, token: NgxDonutChartService, providedIn: "root" });
        return NgxDonutChartService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxDonutChartComponent = (function () {
        function NgxDonutChartComponent() {
        }
        /**
         * @return {?}
         */
        NgxDonutChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setDefaults();
                /** @type {?} */
                var angles = this._calculateAngles(this.data);
                /** @type {?} */
                var ArchPoints = this._calculateArcPoints(this.data);
            };
        /**
         * @return {?}
         */
        NgxDonutChartComponent.prototype.setDefaults = /**
         * @return {?}
         */
            function () {
                this.arcs = [];
                this.radius = this.radius || 200;
                this.margin = this.margin || 10;
                this.thickness = this.thickness || 8;
                this.totalClass = this.totalClass || 'c-donutchart__title';
                this.origin = {
                    x: this.radius,
                    y: this.radius,
                };
                this.width = ((2 * this.radius) + (2 * this.margin)) + 'px';
                this.height = ((2 * this.radius) + (2 * this.margin)) + 'px';
            };
        /**
         * @param {?} data
         * @return {?}
         */
        NgxDonutChartComponent.prototype._calculateArcPoints = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                /** @type {?} */
                var archPoints = [];
                archPoints.push({
                    x: this.radius,
                    y: 0,
                });
                /** @type {?} */
                var startAngle = 0;
                /** @type {?} */
                var endAngle;
                /** @type {?} */
                var startX = this.origin.x;
                /** @type {?} */
                var startY = this.origin.y;
                try {
                    for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                        var item = data_1_1.value;
                        endAngle = (startAngle + item.angle) % 360;
                        startAngle += 8;
                        /** @type {?} */
                        var arc = this._describeArc(startX, startY, this.radius, startAngle, endAngle, item.color);
                        this.arcs.push(arc);
                        startAngle = endAngle;
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                            _a.call(data_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                var e_1, _a;
            };
        /**
         * @param {?} x
         * @param {?} y
         * @param {?} radius
         * @param {?} startAngle
         * @param {?} endAngle
         * @param {?} color
         * @return {?}
         */
        NgxDonutChartComponent.prototype._describeArc = /**
         * @param {?} x
         * @param {?} y
         * @param {?} radius
         * @param {?} startAngle
         * @param {?} endAngle
         * @param {?} color
         * @return {?}
         */
            function (x, y, radius, startAngle, endAngle, color) {
                /** @type {?} */
                var start = this._polarToCartesian(x, y, radius, startAngle);
                /** @type {?} */
                var end = this._polarToCartesian(x, y, radius, endAngle);
                /** @type {?} */
                var arcSweep = endAngle - startAngle <= 180 ? "0" : "1";
                /** @type {?} */
                var d = [
                    "M", start.x, start.y,
                    "A", radius, radius, 0, arcSweep, 1, end.x, end.y,
                ].join(" ");
                return {
                    d: d,
                    end: end,
                    color: color,
                };
            };
        /**
         * @param {?} data
         * @return {?}
         */
        NgxDonutChartComponent.prototype._calculateAngles = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                /** @type {?} */
                var angles = [];
                /** @type {?} */
                var total = this._getTotal(data);
                this.total = total;
                for (var i = 0; i < data.length; i++) {
                    /** @type {?} */
                    var dataItem = data[i];
                    /** @type {?} */
                    var angle = (dataItem.value / total) * 360.0;
                    dataItem.angle = angle;
                    dataItem.percentage = ((dataItem.value / total) * 100.0).toFixed(2) + '%';
                    angles.push(angle);
                }
                return angles;
            };
        /**
         * @param {?} data
         * @return {?}
         */
        NgxDonutChartComponent.prototype._getTotal = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                return data.reduce(function (a, b) { return ({ value: a.value + b.value }); }).value;
            };
        /**
         * @param {?} centerX
         * @param {?} centerY
         * @param {?} radius
         * @param {?} angleInDegrees
         * @return {?}
         */
        NgxDonutChartComponent.prototype._polarToCartesian = /**
         * @param {?} centerX
         * @param {?} centerY
         * @param {?} radius
         * @param {?} angleInDegrees
         * @return {?}
         */
            function (centerX, centerY, radius, angleInDegrees) {
                /** @type {?} */
                var angleInRadians = (angleInDegrees) * Math.PI / 180.0;
                return {
                    x: centerX + (radius * Math.cos(angleInRadians)) + this.margin,
                    y: centerY + (radius * Math.sin(angleInRadians)) + this.margin,
                };
            };
        NgxDonutChartComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'ngx-donut-chart',
                        template: "<div\n  class=\"c-donutchart\"\n  [ngStyle]=\"{'width': width}\">\n  <svg\n    [ngStyle]=\"{'width': width, 'height': height}\"\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <!-- <path [attr.d]=\"pathD\" stroke=\"black\" fill=\"transparent\" stroke-width=\"8\" fill-opacity=\"0.5\"/> -->\n    <path\n      *ngFor=\"let arc of arcs\"\n      [attr.d]=\"arc.d\"\n      [attr.stroke]=\"arc.color\"\n      fill=\"transparent\"\n      [attr.stroke-width]=\"thickness\"\n      fill-opacity=\"0.5\"/>\n  </svg>\n\n  <div\n    class=\"c-donutchart__text\"\n    *ngIf=\"title\"\n    [ngStyle]=\"{'width': width, 'height': height}\">\n    <div\n      [ngClass]=\"totalClass\"\n      [innerText]=\"total\"></div>\n    <div [innerText]=\"title\"></div>\n  </div>\n\n  <div class=\"c-donutchart__legends\">\n    <div\n      class=\"c-donutchart__legend\"\n      *ngFor=\"let item of data\">\n      <div\n        class=\"c-donutchart__legend-bar\"\n        [ngStyle]=\"{'background-color': item.color}\">\n      </div>\n\n      <div\n        class=\"c-donutchart__legend-title\"\n        [innerText]=\"item.label\">\n      </div>\n\n      <div\n        class=\"c-donutchart__legend-percentage\"\n        [innerText]=\"item.percentage\">\n      </div>\n    </div>\n  </div>\n</div>\n",
                        styles: [".c-donutchart{position:relative}.c-donutchart .c-donutchart__text{position:absolute;top:0;left:0;display:flex;flex-flow:column;align-items:center;justify-content:center}.c-donutchart .c-donutchart__title{font-size:40px}.c-donutchart .c-donutchart__legends{display:flex;justify-content:center}.c-donutchart .c-donutchart__legend{display:flex;flex-flow:column;align-items:center;margin:16px 8px}.c-donutchart .c-donutchart__legend-bar{display:flex;align-items:center;justify-content:center;margin-bottom:8px;width:40px;height:8px;border-radius:4px;background-color:#dc143c}.c-donutchart .c-donutchart__legend-percentage,.c-donutchart .c-donutchart__legend-title{text-align:center}"]
                    },] },
        ];
        /** @nocollapse */
        NgxDonutChartComponent.ctorParameters = function () { return []; };
        NgxDonutChartComponent.propDecorators = {
            data: [{ type: i0.Input }],
            radius: [{ type: i0.Input }],
            margin: [{ type: i0.Input }],
            title: [{ type: i0.Input }],
            thickness: [{ type: i0.Input }],
            totalClass: [{ type: i0.Input }]
        };
        return NgxDonutChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxDonutChartModule = (function () {
        function NgxDonutChartModule() {
        }
        NgxDonutChartModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [NgxDonutChartComponent],
                        exports: [NgxDonutChartComponent]
                    },] },
        ];
        return NgxDonutChartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgxDonutChartService = NgxDonutChartService;
    exports.NgxDonutChartComponent = NgxDonutChartComponent;
    exports.NgxDonutChartModule = NgxDonutChartModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,